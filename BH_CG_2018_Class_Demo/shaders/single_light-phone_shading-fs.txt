#version 330 core

uniform mat4 view_matrix;

uniform vec4 global_ambient_light;

uniform vec4 light_position;
uniform vec4 light_color;

uniform vec4 diffuse_reflectivity;
uniform vec4 specular_reflectivity;
uniform float shininess;

in vec3 vs_fs_N;
in vec3 vs_fs_P;

out vec4 frag_color;

void main(void)
{
	vec4 LL=view_matrix*light_position;
	vec3 N=normalize(vs_fs_N);
	vec3 L=normalize(LL.xyz);
	vec3 V=-normalize(vs_fs_P);
	vec3 R=reflect(-L, N);

	float diffuse_factor=max(dot(N, L), 0.0);
	float specular_factor=pow(max(dot(V, R), 0.0), shininess);

	frag_color=diffuse_reflectivity*global_ambient_light
		+(diffuse_factor*diffuse_reflectivity
		+specular_factor*specular_reflectivity)*light_color;
}
